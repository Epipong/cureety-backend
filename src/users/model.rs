// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use std::io::Write;

use chrono::NaiveDateTime;
use diesel::{
    backend::Backend,
    deserialize::{self, FromSql},
    pg::{Pg, PgValue},
    prelude::*,
    r2d2::ConnectionManager,
    serialize::{self, IsNull, Output, Result, ToSql},
    sql_types::Text,
    PgConnection,
};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

pub type Pool = r2d2::Pool<ConnectionManager<PgConnection>>;

impl ToSql<Text, Pg> for Roles {
    fn to_sql(&self, out: &mut Output<Pg>) -> serialize::Result {
        let role_str = match *self {
            Roles::Admin => "admin",
            Roles::Doctor => "doctor",
            Roles::Patient => "patient",
        };
        out.write_all(role_str.as_bytes())?;
        Ok(IsNull::No)
    }
}

impl FromSql<Text, Pg> for Roles {
    fn from_sql(value: PgValue) -> deserialize::Result<Self> {
        match value.as_bytes() {
            b"admin" => Ok(Roles::Admin),
            b"doctor" => Ok(Roles::Doctor),
            b"patient" => Ok(Roles::Patient),
            _ => Err("Unrecognized enum variant".into()),
        }
    }
}

use crate::schema::{sql_types::Roles, users};
#[derive(Queryable, Selectable, Identifiable, Debug, PartialEq, Serialize, Deserialize)]
#[diesel(table_name = users)]
pub struct User {
    pub id: Uuid,
    pub username: String,
    pub email: String,
    pub hash: String,
    pub role: Roles,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}
